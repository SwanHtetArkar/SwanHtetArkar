package application;

import javafx.fxml.FXML;
import javafx.scene.Node;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;

import java.util.ArrayList;

import javax.xml.ws.Endpoint;

import javafx.event.ActionEvent;

import javafx.scene.control.ComboBox;

import javafx.scene.control.TableView;

import javafx.scene.control.TableColumn;

public class CustomerViewController {
	public static int StartPointer= 1;
	public static int EndPointer = 6;
	public final int rowInOnePage = 5;
	public static CustomerData selected = null;
	
	@FXML
	private TextField txfSearch;
	@FXML
	private Button btnSearch;
	@FXML
	private Button btnCancle;
	@FXML
	private Button btnUpdate;
	@FXML
	private Button btnDelete;
	@FXML
	private Button btnAddNew;
	@FXML
	private ComboBox cmbBy;
	@FXML
	private ComboBox cmbValue;
	@FXML
	private TableView table;
	@FXML
	private TableColumn name;
	@FXML
	private TableColumn address;
	@FXML
	private TableColumn phone;
	@FXML
	private TableColumn township;
	@FXML
	private Button btnFastBackward;
	@FXML
	private Button btnBackward;
	@FXML
	private Button btnStepBackward;
	@FXML
	private Button btnStepForward;
	@FXML
	private Button btnForward;
	@FXML
	private Button btnFastForward;
	@FXML
	private Button btnAsc;
	@FXML
	private Button btnDesc;
	@FXML
	private Button btnInventory;
	@FXML
	private Button btnPOS;
	@FXML
	private Button btnCustomer;
	@FXML
	private Button btnVendor;
	@FXML
	private Button btnUnit;
	@FXML
	private Button btnReport;
	@FXML
	private Button btnMax;
	@FXML
	private Button btnMinimize;
	@FXML
	private Button btnClose;

	double x,y;
	@FXML
	void dragged(MouseEvent event) {
		Stage stage=(Stage)((Node) event.getSource()).getScene().getWindow();
		stage.setX(event.getSceneX()-x);
		stage.setY(event.getSceneY()-y);
	}

	@FXML
	void pressed(MouseEvent event) {
		x=event.getSceneX();
		y=event.getSceneY();
	}
	@FXML
	void btnCloseOnAction(ActionEvent event) {
		Stage stage=(Stage)((Node) event.getSource()).getScene().getWindow();
		stage.close();
	}
	@FXML
	void btnMaxOnAction(ActionEvent event) {
		Stage stage=(Stage)((Node) event.getSource()).getScene().getWindow();
		//stage.setFullScreenExitHint(" ");
		stage.setFullScreen(true);
	}

	@FXML
	void btnMinimizeOnAction(ActionEvent event) {
		Stage stage=(Stage)((Node) event.getSource()).getScene().getWindow();
		stage.setIconified(true);
	}
    @FXML
    void btnInventoryOnAction(ActionEvent event) {
    	new Fxloader((Stage)((Node)event.getSource()).getScene().getWindow(), "InventoryView.fxml");	
    }
    @FXML
    void btnPOSOnAction(ActionEvent event) {
    	new Fxloader((Stage)((Node)event.getSource()).getScene().getWindow(), "Pos.fxml");	
    }
    @FXML
    void btnCustomerOnAction(ActionEvent event) {
    	new Fxloader((Stage)((Node)event.getSource()).getScene().getWindow(), "Customer.fxml");	
    }
    @FXML
    void btnVendorOnAction(ActionEvent event) {
    	new Fxloader((Stage)((Node)event.getSource()).getScene().getWindow(), "VendorView.fxml");	
    }
    @FXML
    void btnUnitOnAction(ActionEvent event) {
    	new Fxloader((Stage)((Node)event.getSource()).getScene().getWindow(), "UnitView.fxml");	
    }
    @FXML
    void btnReportOnAction(ActionEvent event) {
    	new Fxloader((Stage)((Node)event.getSource()).getScene().getWindow(), "SaleOrderReport.fxml");	
    }

	// Event Listener on TextField[#txfSearch].onAction
	@FXML
	public void txfSearchOnAction(ActionEvent event) {
		txfSearch.requestFocus();
	}
	// Event Listener on Button[#btnSearch].onAction
	@FXML
	public void btnSearchOnAction(ActionEvent event) {
		table.getItems().clear();
		if (txfSearch.getText().isEmpty()) {
	    	ArrayList<CustomerData> data = startup(); //start up condition 
	        for (int i = 0; i < data.size(); i++) {
				table.getItems().add(data.get(i));
			}
		}else {
			ArrayList<CustomerData> data = CustomerViewDBControl.getSpecificCustomer(txfSearch.getText());
			for (int i = 0; i < data.size(); i++) {
				table.getItems().add(data.get(i));
			}
		}
		
		
	}
	// Event Listener on Button[#btnCancle].onAction
	@FXML
	public void btnCancleOnAction(ActionEvent event) {
		txfSearch.clear();
	}
	// Event Listener on ComboBox[#cmbBy].onAction
	@FXML
	public void cmbByOnAction(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on ComboBox[#cmbValue].onAction
	@FXML
	public void cmbValueOnAction(ActionEvent event) {
		if (cmbValue.getSelectionModel().getSelectedItem().toString()!="None") {
			CustomerViewDBControl.filterForward(cmbValue.getSelectionModel().getSelectedItem().toString());
			CustomerViewDBControl.filterBackward(cmbValue.getSelectionModel().getSelectedItem().toString());
			table.getItems().clear();
	    	ArrayList<CustomerData> data = CustomerViewDBControl.getCustomerInitialize();//start up condition 
	        for (int i = 0; i < data.size(); i++) {
				table.getItems().add(data.get(i));
			}
		}else {
			CustomerViewDBControl.startup1();
			CustomerViewDBControl.startup2();
			table.getItems().clear();
	    	ArrayList<CustomerData> data = startup(); //start up condition 
			for (int i = 0; i < data.size(); i++) {
				table.getItems().add(data.get(i));
			}
		}
		
	}
	// Event Listener on Button[#btnFastBackward].onAction
	@FXML
	public void btnFastBackwardOnAction(ActionEvent event) {
        table.getItems().clear();
		ArrayList<CustomerData> data = startup();
        for (int i = 0; i < data.size(); i++) {
        		table.getItems().add(data.get(i));
		}

        btnFastForward.setDisable(false);
        btnFastBackward.setDisable(true);
	}
	// Event Listener on Button[#btnBackward].onAction
	@FXML
	public void btnBackwardOnAction(ActionEvent event) {
		
		ArrayList<CustomerData> data = new ArrayList<>();
		table.getItems().clear();
		try {
			for(int i=0;i<3;i++){
				data = backward();
			}
			
		} finally {
			StartPointer= data.get(data.size()-1).getCustomer_ID();
	        EndPointer = data.get(0).getCustomer_ID();
			for (int i = data.size()-1;i >= 0; i--) {
        		table.getItems().add(data.get(i));
			}	
		}
        btnFastForward.setDisable(false);
        btnFastBackward.setDisable(false);
	}
	// Event Listener on Button[#btnStepBackward].onAction
	@FXML
	public void btnStepBackwardOnAction(ActionEvent event) {
		ArrayList<CustomerData> data = new ArrayList<>();
		try {
			data = backward();
			table.getItems().clear();
	        for (int i = data.size()-1;i >= 0; i--) {
	        		table.getItems().add(data.get(i));
				
			}
		} catch (Exception e) {
	        StartPointer= data.get(data.size()-1).getCustomer_ID();
	        EndPointer = data.get(0).getCustomer_ID();
		}
    	
        btnFastForward.setDisable(false);
        btnFastBackward.setDisable(false);
	}
	// Event Listener on Button[#btnStepForward].onAction
	@FXML
	public void btnStepForwardOnAction(ActionEvent event) {
		ArrayList<CustomerData> data = forward();
		table.getItems().clear();
		for (int i = 0; i < data.size(); i++) {
			
			table.getItems().add(data.get(i));
		}
        btnFastForward.setDisable(false);
        btnFastBackward.setDisable(false);
		
	}
    @FXML
    void btnForwardOnAction(ActionEvent event) {
    	ArrayList<CustomerData> data = forward();
		data = forward();
		table.getItems().clear();
		for (int i = 0; i < data.size(); i++) {
			
			table.getItems().add(data.get(i));
		}
        btnFastForward.setDisable(false);
        btnFastBackward.setDisable(false);
    }
    @FXML
    void btnFastForwardOnAction(ActionEvent event) {
		table.getItems().clear();
		ArrayList<CustomerData> temp = new ArrayList<>();
    	try {
//    		temp=forward();
			do{
				temp = forward();
				}while (temp.size()>rowInOnePage-1);
	    	
		} catch (Exception e) {
			// TODO: handle exception
		}finally{
			for (int i = 0; i < temp.size(); i++) {
				table.getItems().add(temp.get(i));
			}
			StartPointer = temp.get(0).getCustomer_ID();
	        EndPointer = temp.get(temp.size()-1).getCustomer_ID();
	        btnFastForward.setDisable(true);
	        btnFastBackward.setDisable(false);
		}
    	
    }

	// Event Listener on Button[#btnAsc].onAction
//	@FXML
//	public void btnAscOnAction(ActionEvent event) {
//		System.out.println("Ascending");
//		CustomerViewDBControl.ascending1();
//		table.getItems().clear();
//		ArrayList<CustomerData> data = startup(); //start up condition 
//        for (int i = 0; i < data.size(); i++) {
//			table.getItems().add(data.get(i));
//		}
//	}
	// Event Listener on Button[#btnDesc].onAction
//	@FXML
//	public void btnDescOnAction(ActionEvent event) {
//		System.out.println("Descending");
//		CustomerViewDBControl.descending1();
//		table.getItems().clear();
//		ArrayList<CustomerData> data = startup(); //start up condition 
//        for (int i = 0; i < data.size(); i++) {
//			table.getItems().add(data.get(i));
//		}
//		// TODO Autogenerated
//	}
	// Event Listener on Button[#btnAsc].onAction
	@FXML
	public void btnUpdateOnAction(ActionEvent event) {
		if (table.getSelectionModel().getSelectedItem()== null) {
			new Alert(AlertType.WARNING,"Please select one row!!!",ButtonType.OK).showAndWait();
		} else {
			CustomerData selectedItem = (CustomerData) table.getSelectionModel().getSelectedItem();
			selected = new CustomerData(selectedItem.getCustomer_ID(), selectedItem.getCustomer_Name(), selectedItem.getCustomer_Address(),
					selectedItem.getCustomer_Phone(), selectedItem.getTownshipName());
			new Fxloader((Stage)((Node)event.getSource()).getScene().getWindow(), "CustomerUpdate.fxml");
		}
	}
	public static CustomerData getSelected() {
		return selected;
	}
	public static void setSelected(CustomerData selected) {
		CustomerViewController.selected = selected;
	}
	// Event Listener on Button[#btnAsc].onAction
	@FXML
	public void btnDeleteOnAction(ActionEvent event) {
		if (table.getSelectionModel().getSelectedItem()!= null) {
			CustomerData selectedItem = (CustomerData) table.getSelectionModel().getSelectedItem();
			if (CustomerViewDBControl.deleteRow(selectedItem.getCustomer_ID())) {
				new Alert(AlertType.INFORMATION, "Row is deleted!", ButtonType.OK).showAndWait();
				table.getItems().clear();
				ArrayList<CustomerData> data = startup(); //start up condition 
		        for (int i = 0; i < data.size(); i++) {
					table.getItems().add(data.get(i));
				}
		        
			}
		}else {
			new Alert(AlertType.WARNING,"Please select one row!!!",ButtonType.OK).showAndWait();
		}
		
	}
	// Event Listener on Button[#btnAsc].onAction
	@FXML
	public void btnAddNewOnAction(ActionEvent event) {
		new Fxloader((Stage)((Node)event.getSource()).getScene().getWindow(), "CustomerInput.fxml");
	}
	@FXML
	public void initialize() {
    	name.setCellValueFactory(new PropertyValueFactory<>("customer_Name"));
    	address.setCellValueFactory(new PropertyValueFactory<>("customer_Address"));
    	phone.setCellValueFactory(new PropertyValueFactory<>("customer_Phone"));
    	township.setCellValueFactory(new PropertyValueFactory<>("townshipName"));
 
    	
		table.getItems().clear();
    	ArrayList<CustomerData> data = startup(); //start up condition 
        for (int i = 0; i < data.size(); i++) {
			table.getItems().add(data.get(i));
		}
		cmbBy.getItems().add("Township");
		cmbValue.getItems().addAll(CustomerViewDBControl.getTownship());
		cmbValue.getItems().add("None");
		
		
		
	}
	public static ArrayList<CustomerData> forward() {
		StartPointer = EndPointer;//move start point to next page
    	ArrayList<CustomerData> data = CustomerViewDBControl.getCustomerForward(StartPointer);
        EndPointer = data.get(data.size()-1).getCustomer_ID();//save the id which ended
        StartPointer = data.get(0).getCustomer_ID();
        return data;
	}
	public static ArrayList<CustomerData> backward(){
		EndPointer =StartPointer;
    	ArrayList<CustomerData> data = CustomerViewDBControl.getCustomerBackward(EndPointer);
        StartPointer= data.get(data.size()-1).getCustomer_ID();
        EndPointer = data.get(0).getCustomer_ID();
		return data;
	}
	public static ArrayList<CustomerData> startup() {
    	CustomerViewDBControl.startup1();
    	CustomerViewDBControl.startup2();
    	ArrayList<CustomerData> data = CustomerViewDBControl.getCustomerInitialize(); //start up condition 
        StartPointer = data.get(0).getCustomer_ID();
        EndPointer = data.get(data.size()-1).getCustomer_ID();
        return data;
	}
}
