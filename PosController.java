package application;

import javafx.fxml.FXML;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.event.ActionEvent;

import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.TextArea;

import javafx.scene.layout.AnchorPane;
import javafx.stage.Stage;
import javafx.stage.StageStyle;
import javafx.scene.image.ImageView;

import javafx.scene.input.MouseEvent;

import java.util.ArrayList;
import java.util.Iterator;

import de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon;

import javafx.scene.control.TableView;

import javafx.scene.control.TableColumn;

public class PosController {
	@FXML
	private ImageView icon;
	@FXML
	private Label POS;
	@FXML
	private ComboBox<String> cmbPaidorUnpaid;
    @FXML
    private ListView<String> VendorListView;
    @FXML
    private ListView<String> CustomerListView;
	@FXML
	private FontAwesomeIcon Close;
	@FXML
	private FontAwesomeIcon Minimize;
	@FXML
	private Button btnMax;
	@FXML
	private Button btnMinimize;
	@FXML
	private Button btnClose;
	@FXML
	private Button btnSelect;
	@FXML
	private FontAwesomeIcon FastBackward;
	@FXML
	private Button btnFastBackward;
	@FXML
	private FontAwesomeIcon Backward;
	@FXML
	private Button btnBackward;
	@FXML
	private FontAwesomeIcon StepBackward;
	@FXML
	private Button btnStepBackward;
	@FXML
	private FontAwesomeIcon StepForward;
	@FXML
	private Button btnStepForward;
	@FXML
	private FontAwesomeIcon Forward;
	@FXML
	private Button btnForward;
	@FXML
	private FontAwesomeIcon FastForward;
	@FXML
	private Button btnFastForward;
	@FXML
	private Button btnBackToInventory;
	@FXML
	private TextField txfSearch;
	@FXML
	private Button btnSearch;
	@FXML
	private Button btnCancle;
    @FXML
    private Button btnPrint;
    @FXML
    private Button btnPrintA4;
	@FXML
	private ImageView Search;
	@FXML
	private ImageView Cancel;
	@FXML
	private TableView<ItemData> table;
	@FXML
	private TableColumn<ItemData,String> Code;
	@FXML
	private TableColumn<ItemData,String> Name;
	@FXML
	private TableColumn<ItemData,String> Price;
	@FXML
	private TableColumn<ItemData,Integer> Quantity;
	@FXML
	private TableColumn<ItemData,String> Brand;
	@FXML
	private Button btnSave;
	@FXML
	private Label BillNo;
	@FXML
	private Label number;
	@FXML
	private Button btnClear;
	@FXML
	private ImageView Clear;
	@FXML
	private TableView<Table2Data> table2;
	@FXML
	private TableColumn<Table2Data,String> Table2OfName;
	@FXML
	private TableColumn<Table2Data,String> Table2OfUnit;
	@FXML
	private TableColumn<Table2Data,String> Table2OfPrice;
	@FXML
	private TableColumn<Table2Data,String> Table2OfExtPrice;
	@FXML
	private Label description;
	@FXML
	private TextArea Description;
	@FXML
	private Label subtotal;
	@FXML
	private Label tax;
	@FXML
	private Label Customer;
	@FXML
	private Label total;
	@FXML
	private Label unit;
	@FXML
	private TextField txfVendor;
	@FXML
	private TextField txfSubtotal;
	@FXML
	private TextField txfTax;
	@FXML
	private TextField txfCustomer;
	@FXML
	private TextField txfTotal;

	double x,y;
	int subtotalValue = 0;
	static ItemData selected ;
	static int unitData;
	static TextField flag =  new TextField("False");
	@FXML
	void dragged(MouseEvent event) {
		 Stage stage=(Stage)((Node) event.getSource()).getScene().getWindow();
		 stage.setX(event.getSceneX()-x);
		 stage.setY(event.getSceneY()-y);
	}

	@FXML
	void pressed(MouseEvent event) {
		 x=event.getSceneX();
		 y=event.getSceneY();
	}
	@FXML
	void btnCloseOnAction(ActionEvent event) {
		 Stage stage=(Stage)((Node) event.getSource()).getScene().getWindow();
		 stage.close();
	}
	@FXML
	void btnMaxOnAction(ActionEvent event) {
		 Stage stage=(Stage)((Node) event.getSource()).getScene().getWindow();
		 //stage.setFullScreenExitHint(" ");
		 stage.setFullScreen(true);
	}

	@FXML
	void btnMinimizeOnAction(ActionEvent event) {
		 Stage stage=(Stage)((Node) event.getSource()).getScene().getWindow();
		 stage.setIconified(true);
	}
	
	// Event Listener on Button[#btnFastBackward].onAction
	@FXML
	public void btnFastBackwardOnAction(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnBackward].onAction
	@FXML
	public void btnBackwardOnAction(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnStepBackward].onAction
	@FXML
	public void btnStepBackwardOnAction(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnStepForward].onAction
	@FXML
	public void btnStepForwardOnAction(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnForward].onAction
	@FXML
	public void btnForwardOnAction(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnFastForward].onAction
	@FXML
	public void btnFastForwardOnAction(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnBackToInventory].onAction
	@FXML
	public void btnBackToInventoryOnAction(ActionEvent event) {
		new Fxloader((Stage)((Node)event.getSource()).getScene().getWindow(), "InventoryView.fxml");
	}
	// Event Listener on TextField[#txfSearch].onAction
	@FXML
	public void txfSearchOnAction(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnSearch].onAction
	@FXML
	public void btnSearchOnAction(ActionEvent event) {

        try {
        	table.getItems().clear();
    		ArrayList<ItemData> item = POSDBcontrol.getItemData(txfSearch.getText());
	        for (int i = 0; i < item.size(); i++) {
				table.getItems().add(item.get(i));
				
			}
		} catch (Exception e) {
			e.printStackTrace();
			new Alert(AlertType.INFORMATION,"No item found",ButtonType.OK).show();
		}
		
	}
	// Event Listener on Button[#btnCancle].onAction
	@FXML
	public void btnCancleOnAction(ActionEvent event) {
		txfSearch.clear();
	}
    @FXML
    void btnSelectOnAction(ActionEvent event) {
    	if (unitData!=0) {
    		addToTable2();
        	if (selected.getCustomize_Quantity()!=null) {
        		table.getItems().get(table.getSelectionModel().getSelectedIndex()).setCustomize_Quantity(CustomizedQuantityController.getCustomizeUnit());
    		}else {
    	    	table.getItems().get(table.getSelectionModel().getSelectedIndex()).setQuantity(table.getSelectionModel().getSelectedItem().getQuantity()-unitData);

    		}
        	ArrayList<ItemData> temp1 = new ArrayList<>();
        	for (ItemData item : table.getItems()) {
        	    temp1.add(new ItemData(item.getItem_ID(),item.getItem_Code(),item.getItem_Name(),item.getDescription(),item.getPrice_Purchased()
        	    		,item.getPrice_Selling(),item.getPrice_Customer(),item.getQuantity(),item.getCustomize_Quantity(),item.getDefault_Quantity()
        	    		,item.getMinimum(),item.getBrand_Name(),item.getUnit_Name()));
        	}
        	table.getItems().clear();
        	for (int i = 0; i < temp1.size(); i++) {
        		table.getItems().add(temp1.get(i));
    		}
		}else {
			new Alert(AlertType.INFORMATION,"You Haven't input any unit value",ButtonType.OK).show();
			table.getSelectionModel().clearSelection();
		}
    	
		
    }
    @FXML
    void cmbPaidorUnpaidOnAction(ActionEvent event) {

    }
	// Event Listener on AnchorPane[#btnSave].onDragDetected
	@FXML
	public void btnSaveOnAction(ActionEvent event) {
		if (cmbPaidorUnpaid.getSelectionModel().isEmpty()) {
			new Alert(AlertType.INFORMATION,"Select Paid Or Unpaid",ButtonType.OK).show();
		}else {
			if (cmbPaidorUnpaid.getSelectionModel().getSelectedIndex()==1) {
				if (txfCustomer.getText().isEmpty() && txfVendor.getText().isEmpty()) {
					POSDBcontrol.SaveSale(number.getText(), Integer.parseInt(txfTotal.getText()), 0, 1, Description.getText());
					for (Table2Data data : table2.getItems()) {
						POSDBcontrol.saveItem(POSDBcontrol.InvoiceNumber(), data);
					}
					
				}else {
					String[] customer = txfCustomer.getText().split(":");
					String[] vendor = txfVendor.getText().split(":");
					POSDBcontrol.SaveSale(number.getText(), Integer.parseInt(txfTotal.getText()), 0, 1,
							POSDBcontrol.getCustomerID(customer[0], customer[1]), POSDBcontrol.getVendorID(vendor[0], vendor[1]),
							Description.getText());
					for (Table2Data data : table2.getItems()) {
						POSDBcontrol.saveCustomerItem(POSDBcontrol.InvoiceNumber(), data);
					}
				}
			}else {
				String[] customer = txfCustomer.getText().split(":");
				String[] vendor = txfVendor.getText().split(":");
				POSDBcontrol.SaveSale(number.getText(), 0,Integer.parseInt(txfTotal.getText()), 1,
						POSDBcontrol.getCustomerID(customer[0], customer[1]), POSDBcontrol.getVendorID(vendor[0], vendor[1]),
						Description.getText());
				POSDBcontrol.SaveDebt(POSDBcontrol.getCustomerID(customer[0], customer[1]), Integer.parseInt(txfTotal.getText()));
				for (Table2Data data : table2.getItems()) {
					POSDBcontrol.saveCustomerItem(POSDBcontrol.InvoiceNumber(), data);
				}
			}
			new Alert(AlertType.INFORMATION,"Item Successfully Saved",ButtonType.OK).show();
			table2.getItems().clear();
			subtotalValue = 0;
			txfSubtotal.clear();
			txfTotal.clear();
			txfCustomer.clear();
			txfVendor.clear();
	    	number.setText(String.format("Inv_%03d", POSDBcontrol.InvoiceNumber()+1));
	    	ArrayList<ItemData> temp1 = new ArrayList<>();
	    	for (ItemData item : table.getItems()) {
	    	    temp1.add(POSDBcontrol.getItemData(item.getItem_ID()));
	    	}
	    	table.getItems().clear();
	    	for (int i = 0; i < temp1.size(); i++) {
	    		table.getItems().add(temp1.get(i));
			}
			
		}
		
	}
	// Event Listener on Button[#btnClear].onAction
	@FXML
	public void btnClearOnAction(ActionEvent event) {
		table2.getItems().clear();
		subtotalValue = 0;
		txfSubtotal.clear();
		
		txfTotal.clear();
		
		}
	// Event Listener on TextField[#txfVendor].onAction
	@FXML
	public void txfVendorOnAction(ActionEvent event) {
		VendorListView.setVisible(false);
	}
	// Event Listener on TextField[#txfSubtotal].onAction
	@FXML
	public void txfSubtotalOnAction(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on TextField[#txfTax].onAction
	@FXML
	public void txfTaxOnAction(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on TextField[#txfCustomer].onAction
	@FXML
	public void txfCustomerOnAction(ActionEvent event) {
		CustomerListView.setVisible(false);
	}
	// Event Listener on TextField[#txfTotal].onAction
	@FXML
	public void txfTotalOnAction(ActionEvent event) {
		// TODO Autogenerated
	}
	@FXML
	void btnPrintA4OnAction(ActionEvent event) {
	}
	@FXML
	void btnPrintOnAction(ActionEvent event) {

	}
	@FXML
	void initialize() {
		CustomerListView.setVisible(false);
		VendorListView.setVisible(false);
//for table on left
    	Code.setCellValueFactory(new PropertyValueFactory<>("Item_Code"));
    	Name.setCellValueFactory(new PropertyValueFactory<>("Item_Name"));
    	Price.setCellValueFactory(new PropertyValueFactory<>("Price_Selling"));
    	Quantity.setCellValueFactory(new PropertyValueFactory<>("Quantity"));
    	Brand.setCellValueFactory(new PropertyValueFactory<>("Brand_Name"));
//Set invoice number
    	number.setText(String.format("Inv_%03d", POSDBcontrol.InvoiceNumber()+1));
//preset tax amount
    	txfTax.setText("10");
//set paidUnpaid
    	cmbPaidorUnpaid.getItems().addAll(POSDBcontrol.getSalesOrderTypes());
//Flag Listener
    	flag.textProperty().addListener((observable, oldValue, newValue) -> {
    		if (flag.getText()=="False") {
				table.getSelectionModel().clearSelection();
			}
    	});
//Customer list set data
		txfCustomer.textProperty().addListener((observable, oldValue, newValue) -> {
			CustomerListView.setVisible(true);
        	ArrayList<String> data = POSDBcontrol.getCustomer(txfCustomer.getText());
       			CustomerListView.getItems().clear();
       	        for (int i = 0; i < data.size(); i++) {
       	        	CustomerListView.getItems().add(data.get(i));
       			}
       	    if (txfCustomer.getText().isEmpty()) {
		    	Code.setCellValueFactory(new PropertyValueFactory<>("Item_Code"));
		    	Name.setCellValueFactory(new PropertyValueFactory<>("Item_Name"));
		    	Price.setCellValueFactory(new PropertyValueFactory<>("Price_Selling"));
		    	Quantity.setCellValueFactory(new PropertyValueFactory<>("Quantity"));
		    	Brand.setCellValueFactory(new PropertyValueFactory<>("Brand_Name"));
		    	ArrayList<ItemData> temp1 = new ArrayList<>();
		    	for (ItemData item : table.getItems()) {
		    	    temp1.add(new ItemData(item.getItem_ID(),item.getItem_Code(),item.getItem_Name(),item.getDescription(),item.getPrice_Purchased()
		    	    		,item.getPrice_Selling(),item.getPrice_Customer(),item.getQuantity(),item.getCustomize_Quantity(),item.getDefault_Quantity()
		    	    		,item.getMinimum(),item.getBrand_Name(),item.getUnit_Name()));
		    	}
		    	table.getItems().clear();
		    	for (int i = 0; i < temp1.size(); i++) {
		    		table.getItems().add(temp1.get(i));
				}
				
				
		    	ArrayList<Table2Data> temp = new ArrayList<>();
		    	for (Table2Data item : table2.getItems()) {
		    	    temp.add(new Table2Data(item.getId(),item.getName(), item.getUnitName(), item.getUnit(), item.getPrice(), item.getCustomerPrice(),item.getCustomizeQuantity()));
		    	}
		    	table2.getItems().clear();
		    	subtotalValue = 0;
				Table2OfName.setCellValueFactory(new PropertyValueFactory<>("Name"));
		    	Table2OfUnit.setCellValueFactory(new PropertyValueFactory<>("ShowUnit"));
		    	Table2OfPrice.setCellValueFactory(new PropertyValueFactory<>("ShowPrice"));
		    	Table2OfExtPrice.setCellValueFactory(new PropertyValueFactory<>("ShowExtPrice"));
		    	for (int i = 0; i < temp.size(); i++) {
		    		table2.getItems().add(temp.get(i));
			    	subtotalValue =subtotalValue+ temp.get(i).getExtPrice();
				}
		    	txfSubtotal.setText(subtotalValue+"");
		    	txfTax.setText("10");
		    	txfTotal.setText(subtotalValue+((subtotalValue*Integer.parseInt(txfTax.getText()))/100)+"");
				
			}
       		
        });
		try {
			CustomerListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {
				txfCustomer.setText(CustomerListView.getSelectionModel().getSelectedItem());
		    	Code.setCellValueFactory(new PropertyValueFactory<>("Item_Code"));
		    	Name.setCellValueFactory(new PropertyValueFactory<>("Item_Name"));
		    	Price.setCellValueFactory(new PropertyValueFactory<>("Price_Customer"));
		    	Quantity.setCellValueFactory(new PropertyValueFactory<>("Quantity"));
		    	Brand.setCellValueFactory(new PropertyValueFactory<>("Brand_Name"));
				CustomerListView.setVisible(false);	
		    	ArrayList<ItemData> temp1 = new ArrayList<>();
		    	for (ItemData item : table.getItems()) {
		    	    temp1.add(new ItemData(item.getItem_ID(),item.getItem_Code(),item.getItem_Name(),item.getDescription(),item.getPrice_Purchased()
		    	    		,item.getPrice_Selling(),item.getPrice_Customer(),item.getQuantity(),item.getCustomize_Quantity(),item.getDefault_Quantity()
		    	    		,item.getMinimum(),item.getBrand_Name(),item.getUnit_Name()));
		    	}
		    	table.getItems().clear();
		    	for (int i = 0; i < temp1.size(); i++) {
		    		table.getItems().add(temp1.get(i));
				}
				
				
		    	ArrayList<Table2Data> temp = new ArrayList<>();
		    	for (Table2Data item : table2.getItems()) {
		    	    temp.add(new Table2Data(item.getId(),item.getName(), item.getUnitName(), item.getUnit(), item.getPrice(), item.getCustomerPrice(),item.getCustomizeQuantity()));
		    	}
		    	table2.getItems().clear();
		    	subtotalValue = 0;

				Table2OfName.setCellValueFactory(new PropertyValueFactory<>("Name"));
		    	Table2OfUnit.setCellValueFactory(new PropertyValueFactory<>("ShowUnit"));
		    	Table2OfPrice.setCellValueFactory(new PropertyValueFactory<>("ShowCustomerPrice"));
		    	Table2OfExtPrice.setCellValueFactory(new PropertyValueFactory<>("ShowExtCustomerPrice"));
		    	for (int i = 0; i < temp.size(); i++) {
		    		table2.getItems().add(temp.get(i));
			    	subtotalValue =subtotalValue+ temp.get(i).getExtCustomerPrice();
				}
		    	txfSubtotal.setText(subtotalValue+"");
		    	txfTax.setText("10");
		    	txfTotal.setText(subtotalValue+((subtotalValue*Integer.parseInt(txfTax.getText()))/100)+"");
				
	        });
		} catch (Exception e) {
			// TODO: handle exception
		}		
		
//vendor list set data
		txfVendor.textProperty().addListener((observable, oldValue, newValue) -> {
			VendorListView.setVisible(true);
        	ArrayList<String> data = POSDBcontrol.getVendor(txfVendor.getText());
       			VendorListView.getItems().clear();
       	        for (int i = 0; i < data.size(); i++) {
       	        	VendorListView.getItems().add(data.get(i));
       			}
        });
		try {
			VendorListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {
				txfVendor.setText(VendorListView.getSelectionModel().getSelectedItem());
				VendorListView.setVisible(false);
	        });
		} catch (Exception e) {
			// TODO: handle exception
		}
		
		try {
		table.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {
			selected = table.getSelectionModel().getSelectedItem();
			if (selected.getCustomize_Quantity()==null||selected.getCustomize_Quantity()=="") {	
				Stage sc = new Stage();
				sc.initStyle(StageStyle.TRANSPARENT);
				new Fxloader(sc, "POSUnit.fxml");
			}else {
				Stage sc = new Stage();
				sc.initStyle(StageStyle.TRANSPARENT);
				new Fxloader(sc, "CustomizedQuantity.fxml");
			}
			
		 	
	    	if (txfCustomer.getText().isEmpty()) {
	    		Table2OfName.setCellValueFactory(new PropertyValueFactory<>("Name"));
		    	Table2OfUnit.setCellValueFactory(new PropertyValueFactory<>("ShowUnit"));
		    	Table2OfPrice.setCellValueFactory(new PropertyValueFactory<>("ShowPrice"));
		    	Table2OfExtPrice.setCellValueFactory(new PropertyValueFactory<>("ShowExtPrice"));
		     	
			}else {
				Table2OfName.setCellValueFactory(new PropertyValueFactory<>("Name"));
		    	Table2OfUnit.setCellValueFactory(new PropertyValueFactory<>("ShowUnit"));
		    	Table2OfPrice.setCellValueFactory(new PropertyValueFactory<>("ShowCustomerPrice"));
		    	Table2OfExtPrice.setCellValueFactory(new PropertyValueFactory<>("ShowExtCustomerPrice"));
  	
			}
	
	        });
		} catch (Exception e) {
			// TODO: handle exception
		}
		
	}
	public static void setUnitData(int unit) {
		unitData = unit;
	}
	public void addToTable2() {
		Table2Data data = new Table2Data(selected.getItem_ID(),selected.getItem_Name(), POSDBcontrol.getUnit(Integer.parseInt(selected.getUnit_Name()))
				, unitData,selected.getPrice_Selling(), selected.getPrice_Customer(),CustomizedQuantityController.getCustomizeUnit());
		table2.getItems().add(data);
    	if (txfCustomer.getText().isEmpty()) {
	    	subtotalValue =subtotalValue+ data.getExtPrice();
	    	txfSubtotal.setText(subtotalValue+"");
	    	txfTotal.setText(subtotalValue+((subtotalValue*Integer.parseInt(txfTax.getText()))/100)+"");
    	}else {

	    	subtotalValue =subtotalValue+ data.getExtCustomerPrice();
	    	txfSubtotal.setText(subtotalValue+"");
	    	txfTotal.setText(subtotalValue+((subtotalValue*Integer.parseInt(txfTax.getText()))/100)+"");
	    	
    	}
    	unitData= 0;
	}
	
}
